<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>philokey的笔记</title><link href="http://www.philokey.com/" rel="alternate"></link><link href="http://www.philokey.com/feeds/philokey.atom.xml" rel="self"></link><id>http://www.philokey.com/</id><updated>2014-10-28T00:00:00+08:00</updated><entry><title>Scala学习笔记</title><link href="http://www.philokey.com/pages/2014/10/28/scalaxue-xi-bi-ji.html" rel="alternate"></link><updated>2014-10-28T00:00:00+08:00</updated><author><name>philokey</name></author><id>tag:www.philokey.com,2014-10-28:pages/2014/10/28/scalaxue-xi-bi-ji.html</id><summary type="html">&lt;h1&gt;Functional Programming Principles in Scala&lt;/h1&gt;
&lt;h2&gt;Programming Paradigms(编程范式)&lt;/h2&gt;
&lt;p&gt;Paradigm: In science, a &lt;em&gt;paradigm&lt;/em&gt; describes distinct concepts or thought patterns in some scientific discipline.&lt;/p&gt;
&lt;p&gt;Main programming paradigms:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;imperative programming(命令式编程)&lt;/li&gt;
&lt;li&gt;functional programming&lt;/li&gt;
&lt;li&gt;logic programming&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Orthogonal to it:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;object-oriented programming(面向对象的程序设计)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Imperative programming&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;modifying mutable(可变的) variables &lt;/li&gt;
&lt;li&gt;using assignments&lt;/li&gt;
&lt;li&gt;and control structures such as if-then-else, loops, break,
continue, return.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The most common informal way to understand imperative programs is as instruction sequences for a Von Neumann(冯诺依曼) computer.&lt;/p&gt;
&lt;p&gt;There’s a strong correspondence between&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;Mutable variables  ≈ memory cells
Variable dereferences ≈ load instructions
Variable assignments ≈ store instructions
Control structures ≈ jumps
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Bottleneck(瓶颈): One tends to conceptualize data structures word-by-word.&lt;/p&gt;
&lt;h2&gt;Functional Programming&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;In a restricted sense, functional programming (FP) means
programming without mutable variables, assignments, loops,
and other imperative control structures.&lt;/li&gt;
&lt;li&gt;In a wider sense, a functional programming language enables
the construction of elegant programs that focus on functions.&lt;/li&gt;
&lt;li&gt;In particular, functions in a FP language are first-class citizens.
This means&lt;ul&gt;
&lt;li&gt;they can be defined anywhere, including inside other functions&lt;/li&gt;
&lt;li&gt;like any other value, they can be passed as parameters to functions and returned as results&lt;/li&gt;
&lt;li&gt;as for other values, there exists a set operators to compose
functions&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;Elements of Programming&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Call-by-value has the advantage that it evaluates every function argument only once.  &lt;strong&gt;(x: Int)&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;sumOfSquares(3, 2+2)
sumOfSquares(3, 4)
square(3) + square(4)
3 * 3 + square(4)
9 + square(4)
9 + 4 * 4
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Call-by-name has the advantage that a function argument is not evaluated if the corresponding parameter is unused in the evaluation of the function body. &lt;strong&gt;(y: =&amp;gt; Double)&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;sumOfSquares(3, 2+2)
square(3) + square(2+2)
3 * 3 + square(2+2)
9 + square(2+2)
9 + (2+2) * (2+2)
9 + 4 * (2+2)
9 + 4 * 4
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;semicolons #分号&lt;/p&gt;
&lt;h1&gt;Tail Recursion&lt;/h1&gt;
&lt;p&gt;Implementation Consideration: If a function calls itself as its last
action, the function’s stack frame can be reused. This is called &lt;strong&gt;&lt;em&gt;tail recursion.&lt;/em&gt;&lt;/strong&gt;
⇒ Tail recursive functions are iterative processes.
In general, if the last action of a function consists of calling a function (which may be the same), one stack frame would be
sufficient for both functions. Such calls are called tail-calls.&lt;/p&gt;
&lt;p&gt;尾调用的重要性在于它可以不在调用栈上面添加一个新的堆栈帧——而是更新它，如同迭代一般。尾递归因而具有两个特征：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;调用自身函数(Self-called)；&lt;/li&gt;
&lt;li&gt;计算仅占用常量栈空间(Stack Space)。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;而形式上只要是最后一个return语句返回的是一个完整函数，它就是尾递归。&lt;/p&gt;
&lt;h1&gt;Higher-Order Functions&lt;/h1&gt;
&lt;p&gt;Functions that take other functions as parameters or that return
functions as results are called &lt;strong&gt;&lt;em&gt;higher order functions&lt;/em&gt;&lt;/strong&gt;.&lt;/p&gt;
&lt;h2&gt;Summing with Higher-Order Functions&lt;/h2&gt;
&lt;p&gt;The type A =&amp;gt; B is the type of a function that takes an argument of type A and returns a result of type B .&lt;/p&gt;
&lt;p&gt;So, Int =&amp;gt; Int is the type of functions that map integers to integers.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c1"&gt;//Let’s define:&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;sum&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Int&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nc"&gt;Int&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Int&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Int&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Int&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;sum&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;//We can then write:&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;sumInts&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Int&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Int&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="k"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sum&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;sumCubes&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Int&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Int&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="k"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sum&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cube&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;sumFactorials&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Int&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Int&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="k"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sum&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fact&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;//where&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Int&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Int&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;cube&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Int&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Int&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;fact&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Int&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Int&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="n"&gt;fact&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Anonymous Functions&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;Anonymous Function&lt;/em&gt;&lt;/strong&gt;: a function without giving it a name.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;sumInts&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Int&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Int&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="k"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sum&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="k"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;sumCubes&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Int&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Int&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="k"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sum&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="k"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;Currying(柯里化)&lt;/h1&gt;
&lt;p&gt;把接受多个参数的函数变换成接受一个单一参数（最初函数的第一个参数）的函数，并且返回接受余下的参数而且返回结果的新函数的技术。&lt;/p&gt;
&lt;h2&gt;Functions Returning Functions&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;sum&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Int&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nc"&gt;Int&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;Int&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;Int&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="k"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nc"&gt;Int&lt;/span&gt; &lt;span class="k"&gt;=&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;sumF&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Int&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Int&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Int&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;sumF&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;sumF&lt;/span&gt; &lt;span class="c1"&gt;//返回值&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;sum is now a function that returns another function.&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;sum (cube) (1, 10)
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;sum(cube) applies sum to cube and returns the sum of cubes
function.&lt;/li&gt;
&lt;li&gt;sum(cube) is therefore equivalent to sumCubes .&lt;/li&gt;
&lt;li&gt;This function is next applied to the arguments (1, 10) .&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Generally, function application associates to the left:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;sum(cube)(1, 10) == (sum (cube)) (1, 10)

def f ( args 1 )...( args n − 1 )( args n ) = E
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;is shown to be equivalent to&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;def f = ( args 1 ⇒ ( args 2 ⇒ ...( args n ⇒ E )...))
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;Functions and Data&lt;/h1&gt;
&lt;h2&gt;Classes&lt;/h2&gt;
&lt;p&gt;In Scala, we do this by defining a class:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Rational&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Int&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Int&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;numer&lt;/span&gt; &lt;span class="k"&gt;=&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;denom&lt;/span&gt; &lt;span class="k"&gt;=&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This definition introduces two entities:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A new type, named Rational (有理数).&lt;/li&gt;
&lt;li&gt;A constructor Rational to create elements of this type.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Scala keeps the names of types and values in different namespaces. So there’s no conflict between the two defintions of Rational .&lt;/p&gt;
&lt;h2&gt;Objects&lt;/h2&gt;
&lt;p&gt;We call the elements of a class type objects.&lt;/p&gt;
&lt;p&gt;We create an object by prefixing an application of the constructor of the class with the operator new .&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Example&lt;/em&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;new Rational(1, 2)
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Members of an Object&lt;/h2&gt;
&lt;p&gt;Objects of the class Rational have two members, numer and denom .
We select the members of an object with the infix operator ‘.’ (like in Java).&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Example&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;val&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="k"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;Rational&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;   &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Rational&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;Rational&lt;/span&gt;&lt;span class="k"&gt;@&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="n"&gt;abe0e27&lt;/span&gt;
&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;numer&lt;/span&gt;                      &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;denom&lt;/span&gt;                      &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;Evaluation and Operators&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;1.Any method with a parameter can be used like an infix operator.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;It is therefore possible to write&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;r add s                                             r.add(s)
r less s           /* in place of */          r.less(s)
r max s                                             r.max(s)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;2.Operators can be used as identifiers.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;于是就可以方便的重载运算符了&lt;/em&gt;&lt;/p&gt;
&lt;h1&gt;Class Hierarchies(类层次)&lt;/h1&gt;
&lt;h2&gt;Abstract Classes&lt;/h2&gt;
&lt;p&gt;Consider the task of writing a class for sets of integers with the
following operations.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;abstract&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;IntSet&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;incl&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Int&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;IntSet&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;contains&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Int&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Boolean&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;IntSet is an &lt;strong&gt;&lt;em&gt;abstract class&lt;/em&gt;&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Abstract classes can contain members which are missing an implementation (in our case, incl and contains ).&lt;/p&gt;
&lt;p&gt;Consequently, no instances of an abstract class can be created with the operator &lt;em&gt;new&lt;/em&gt; .&lt;/p&gt;
&lt;p&gt;Let’s consider implementing sets as binary trees.
There are two types of possible trees: a tree for the empty set, and a tree consisting of an integer and two sub-trees.
Here are their implementations:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c1"&gt;//这是可持久化的二叉搜索树&lt;/span&gt;
&lt;span class="c1"&gt;//IntSet is called the superclass of Empty and NonEmpty .(C中的基类)&lt;/span&gt;
&lt;span class="c1"&gt;//Empty and NonEmpty are subclasses of IntSet .&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Empty&lt;/span&gt; &lt;span class="k"&gt;extends&lt;/span&gt; &lt;span class="nc"&gt;IntSet&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;contains&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Int&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Boolean&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;incl&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Int&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;IntSet&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;NonEmpty&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;Empty&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;Empty&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;NonEmpty&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;elem&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Int&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;left&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;IntSet&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;right&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;IntSet&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="k"&gt;extends&lt;/span&gt; &lt;span class="nc"&gt;IntSet&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;contains&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Int&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Boolean&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;elem&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="n"&gt;left&lt;/span&gt; &lt;span class="n"&gt;contains&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;elem&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="n"&gt;right&lt;/span&gt; &lt;span class="n"&gt;contains&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;incl&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Int&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;IntSet&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;elem&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;NonEmpty&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;elem&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;left&lt;/span&gt; &lt;span class="n"&gt;incl&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;right&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;elem&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;NonEmpty&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;elem&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;left&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;right&lt;/span&gt; &lt;span class="n"&gt;incl&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Implementation and Overriding&lt;/h2&gt;
&lt;p&gt;The definitions of contains and incl in the classes Empty and NonEmpty implement the abstract functions in the base trait IntSet .
It is also possible to redefine an existing, non-abstract definition in a
subclass by using override .&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;abstract&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Base&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;foo&lt;/span&gt; &lt;span class="k"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;bar&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Int&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Sub&lt;/span&gt; &lt;span class="k"&gt;extends&lt;/span&gt; &lt;span class="nc"&gt;Base&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;override&lt;/span&gt; &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;foo&lt;/span&gt; &lt;span class="k"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;bar&lt;/span&gt; &lt;span class="k"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Programs&lt;/h2&gt;
&lt;p&gt;Create standalone applications in Scala.
Each such application contains an object with a &lt;strong&gt;main method&lt;/strong&gt;.
For instance, here is the “Hello World!” program in Scala.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;object&lt;/span&gt; &lt;span class="nc"&gt;Hello&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Array&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;String&lt;/span&gt;&lt;span class="o"&gt;])&lt;/span&gt; &lt;span class="k"&gt;=&lt;/span&gt; &lt;span class="n"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="err"&gt;”&lt;/span&gt;&lt;span class="n"&gt;hello&lt;/span&gt; &lt;span class="n"&gt;world&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="err"&gt;”&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Traits&lt;/h2&gt;
&lt;p&gt;In Java, as well as in Scala, a class can only have one superclass.
But what if a class has several natural supertypes to which it conforms or from which it wants to inherit code?
Here, you could use &lt;strong&gt;&lt;em&gt;traits&lt;/em&gt;&lt;/strong&gt;.
A trait is declared like an abstract class, just with trait instead of abstract class .&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;trait&lt;/span&gt; &lt;span class="nc"&gt;Planar&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;height&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Int&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;width&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Int&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;surface&lt;/span&gt; &lt;span class="k"&gt;=&lt;/span&gt; &lt;span class="n"&gt;height&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;width&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Square&lt;/span&gt; &lt;span class="k"&gt;extends&lt;/span&gt; &lt;span class="nc"&gt;Shape&lt;/span&gt; &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nc"&gt;Planar&lt;/span&gt; &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nc"&gt;Movable&lt;/span&gt; &lt;span class="o"&gt;...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;Polymorphism(多态)&lt;/h1&gt;
&lt;h2&gt;Value Parameters&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;package week4
trait IntList ...
class Cons(val head: Int, val tail: IntList) extends IntList ...
class Nil extends IntList ...
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;A list is eithter&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;an empty list new Nil&lt;/li&gt;
&lt;li&gt;a list new Cons(x, xs) consisting of a head element x and a tail list xs.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Note the abbreviation &lt;strong&gt;(val head: Int, val tail: IntList)&lt;/strong&gt; in the defitions of Cons.&lt;/p&gt;
&lt;p&gt;This defines at the same time parameters and fields of a class.&lt;/p&gt;
&lt;p&gt;It is equivalent to:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Cons&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;_head&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Int&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nc"&gt;_tail&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;IntList&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="k"&gt;extends&lt;/span&gt; &lt;span class="nc"&gt;IntList&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;val&lt;/span&gt; &lt;span class="n"&gt;head&lt;/span&gt; &lt;span class="k"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;_head&lt;/span&gt;
    &lt;span class="k"&gt;val&lt;/span&gt; &lt;span class="n"&gt;tail&lt;/span&gt; &lt;span class="k"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;_tail&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Type Parameters&lt;/h2&gt;
&lt;p&gt;类似于template吧&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;trait&lt;/span&gt; &lt;span class="nc"&gt;List&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;T&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;isEmpty&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Boolean&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;head&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;T&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;tail&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;List&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;T&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Cons&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;T&lt;/span&gt;&lt;span class="o"&gt;](&lt;/span&gt;&lt;span class="k"&gt;val&lt;/span&gt; &lt;span class="n"&gt;head&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;T&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="k"&gt;val&lt;/span&gt; &lt;span class="n"&gt;tail&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;List&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;T&lt;/span&gt;&lt;span class="o"&gt;])&lt;/span&gt; &lt;span class="k"&gt;extends&lt;/span&gt; &lt;span class="nc"&gt;List&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;T&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;isEmpty&lt;/span&gt; &lt;span class="k"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Nil&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;T&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="nc"&gt;extends&lt;/span&gt; &lt;span class="nc"&gt;List&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;T&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;isEmpty&lt;/span&gt; &lt;span class="k"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;head&lt;/span&gt; &lt;span class="k"&gt;=&lt;/span&gt; &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;NoSuchElementException&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Nil.head&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;tail&lt;/span&gt; &lt;span class="k"&gt;=&lt;/span&gt; &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;NoSuchElementException&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Nil.tail&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;We can then write:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;singleton&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;Int&lt;/span&gt;&lt;span class="o"&gt;](&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;singleton&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;Boolean&lt;/span&gt;&lt;span class="o"&gt;](&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;scala 编译器可以自动判断类型,所以可以简写成&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;singleton&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;singleton&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;polymorphism&lt;/h2&gt;
&lt;p&gt;ploymorphism means that a function type comes "in many forms"
In programming it means that&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;the function can be applied to arguments of many types&lt;/li&gt;
&lt;li&gt;the type can have instances of many types&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;Written with &lt;a href="https://stackedit.io/"&gt;StackEdit&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;</summary></entry><entry><title>C++中的类</title><link href="http://www.philokey.com/pages/2014/10/15/czhong-de-lei.html" rel="alternate"></link><updated>2014-10-15T00:00:00+08:00</updated><author><name>philokey</name></author><id>tag:www.philokey.com,2014-10-15:pages/2014/10/15/czhong-de-lei.html</id><summary type="html">&lt;h2&gt;公有继承&lt;/h2&gt;
&lt;p&gt;通过 is-a 的方式进行继承&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;基类先被创建&lt;/li&gt;
&lt;li&gt;派生类通过成员初始化列表将基类信息传递给基类构造hanshu&lt;/li&gt;
&lt;li&gt;如果省略成员初始化列表,基类将使用默认构造函数&lt;/li&gt;
&lt;li&gt;派生类过期时,先调用派生类的析构函数&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;基类和派生类的特殊关系&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="n"&gt;A&lt;/span&gt; {
&lt;span class="n"&gt;private:&lt;/span&gt;
    &lt;span class="n"&gt;string&lt;/span&gt; &lt;span class="nb"&gt;name&lt;/span&gt;;
&lt;span class="n"&gt;public:&lt;/span&gt;
    &lt;span class="nb"&gt;void&lt;/span&gt; &lt;span class="nb"&gt;print&lt;/span&gt;() {
        &lt;span class="nb"&gt;printf&lt;/span&gt;(&lt;span class="s"&gt;&amp;quot;A\n&amp;quot;&lt;/span&gt;);
    }
    &lt;span class="n"&gt;A&lt;/span&gt;(&lt;span class="n"&gt;string&lt;/span&gt; &lt;span class="n"&gt;st&lt;/span&gt;) {
        &lt;span class="nb"&gt;name&lt;/span&gt; = &lt;span class="n"&gt;st&lt;/span&gt;;
    }
};
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="n"&gt;B:&lt;/span&gt; &lt;span class="n"&gt;public&lt;/span&gt; &lt;span class="n"&gt;A&lt;/span&gt; {
&lt;span class="n"&gt;public:&lt;/span&gt;
    &lt;span class="n"&gt;B&lt;/span&gt;(&lt;span class="n"&gt;string&lt;/span&gt; &lt;span class="n"&gt;st&lt;/span&gt;):&lt;span class="n"&gt;A&lt;/span&gt;(&lt;span class="n"&gt;st&lt;/span&gt;){}
};
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;基类指针可以再不进行显示类型转换的情况下指向派生类的对象; 基类引用可以再不进行显式类型转换的情况下引用派生类对象&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;B tp(&amp;quot;abc&amp;quot;);
A &amp;amp;rt = tp; //right
A *pt = &amp;amp;tp; //right
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;不能将基类对象和地址赋给派生类引用和指针&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;A tp(&amp;quot;abc&amp;quot;);
B &amp;amp;rr = tp; //wrong
B *pr = &amp;amp;tp;//wrong
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;以上两条符合"类型从高到底可以自动转换"&lt;/p&gt;
&lt;h3&gt;多态公有继承&lt;/h3&gt;
&lt;p&gt;当一个方法在基类和派生类中的行为不同时，重新修改基类中的那个方法，使之具有多态。一般有两种机制用于实现多态公有继承：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;在派生类中重新定义基类的方法&lt;/li&gt;
&lt;li&gt;使用虚函数（虚方法）&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;如果方法是通过引用或指针而不是对象调用的，如果没有采用虚函数方法，则程序根据引用类型或指针类型选择方法，如果采用虚函数了，则程序根据引用或者指针指向的对象的类型来选择方法。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;//behavior with non-virtual VieAcct()
//method chosen according to reference type
Brass dom();
BrassPlus dot();
Brass &amp;amp;b1_ref = dom;
Brass &amp;amp;b2_ref = dot;
b1_ref.VeiAcct(); //use Brass::VieAcct()
b2_ref.VeiAcct(); //use Brass::VieAcct()
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;//behavior with virtual VieAcct()
//method chosen according to object type
Brass dom();
BrassPlus dot();
Brass &amp;amp;b1_ref = dom;
Brass &amp;amp;b2_ref = dot;
b1_ref.VeiAcct(); //use Brass::VieAcct()
b2_ref.VeiAcct(); //use BrassPluss::VieAcct()
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;析构函数应该是虚拟的&lt;/p&gt;
&lt;h3&gt;静态联编和动态联编：&lt;/h3&gt;
&lt;p&gt;联编：将源代码中函数调用解释为执行特定的函数代码成为函数名联编。C/C++在编译过程中进行的联编称之为静态联编，又称为早期联编；在程序运行过程中联编称之为动态联编，也称为晚期联编。编译器对非虚拟方法使用静态联编，对虚拟方法使用动态联编。&lt;/p&gt;
&lt;h3&gt;虚函数的工作机制&lt;/h3&gt;
&lt;p&gt;C++规定了虚函数的行为，但将实现方法留给了编译器作者。不需要知道实现方法就可以使用虚函数，但是了解虚函数的工作原理有助于更好的理解虚函数：&lt;/p&gt;
&lt;p&gt;通常，编译器处理虚函数的方法是：给每个类对象添加一个隐藏成员。隐藏成员中保存了一个指向函数地址数组的指针。这种数组称为虚函数表(virtual function table,vtbl)。虚函数表中存储了为类对象进行声明的虚函数的地址。例如，基类对象包含一个指针，该指针指向基类中所有虚函数的地址表。派生类&lt;/p&gt;
&lt;p&gt;将包含一个指向对立地址表的指针。如果派生类提供了虚函数的新定义，该虚函数表将保存新函数的地址，如果派生类没有重新定义虚函数，则该vtbl将保存&lt;/p&gt;
&lt;p&gt;函数原始版本的地址。如果派生类定义了 新的虚函数，则该函数的地址也将被添加到vtbl中。但是注意，无论类中包含多少个虚函数，都只需要在对象中添加1个地址成员表，只是表的大小不一样。&lt;/p&gt;
&lt;h3&gt;虚函数的注意事项&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;在基类方法的声明中使用关键字virtual可使该方法在基类以及所有的派生类（包括从派生类的派生出来的派生类）中是虚拟的，因为方法在基类中被声明为虚拟的后，它在派生类中自动默认为虚拟的。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;如果使用指向对象的引用或指针来调用虚方法，程序将使用为对象类型定义的方法，而不使用为引用或指针类型定义的方法。这个就是动态联编（晚期）联编。这个行为非常重要，因为这样就可以使得基类指针或引用可以指向派生类对象&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;构造函数不能是虚函数，因为派生类不能继承构造函数，所以没有什么意义&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;构函数应当是虚函数，除非类不做基类。通常应该给基类提供一个虚析构函数，即使它不需要析构函数。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;友元函数不能是虚函数，因为友元不是类成员，而只有类成员才能是虚函数。如果由于这个原因而导致了设计问题 ，可以通过友元函数使用虚函数来解决。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;如果派生类没有重新定义函数，将使用该函数的基类版本。如果派生类位于派生类链中，则将使用最新的虚函数方法办法，如果基类是隐藏的除外。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;重新定义隐藏方法&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;calss Dwelling {
public:
    virtual void showperks (int a) const;
...
};
class Houve: public Dwelling {
public:
    virtual void showperks()const;
...
}

Hovel trump;
trump.showperks(); //valid
trump.showperks(); //invalid
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Protected&lt;/h3&gt;
&lt;p&gt;protected和private 相似，在类外只能用公有类成员访问protected部分中的类成员. protected与private的区别只有在派生类中能体现出来, 派生类的成员可以直接访问protected保护成员.&lt;/p&gt;
&lt;h3&gt;抽象基类&lt;/h3&gt;
&lt;p&gt;纯虚函数(pure virtual function)：在本类里不能有实现（描述功能），实现需要在子类中实现. 纯虚函数声明的结尾处为 = 0.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nx"&gt;virtual&lt;/span&gt; &lt;span class="kr"&gt;double&lt;/span&gt; &lt;span class="nx"&gt;Area&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="kr"&gt;const&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;//a pure virtual function&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;抽象类：一个类可以抽象出不同的对象来表达一个抽象的概念和通用的接口，这个类不能实例化(创造)对象。有纯虚函数的类是抽象类.&lt;/p&gt;</summary></entry><entry><title>C++中的static</title><link href="http://www.philokey.com/pages/2014/09/01/czhong-de-static.html" rel="alternate"></link><updated>2014-09-01T00:00:00+08:00</updated><author><name>philokey</name></author><id>tag:www.philokey.com,2014-09-01:pages/2014/09/01/czhong-de-static.html</id><summary type="html">&lt;h2&gt;静态全局变量&lt;/h2&gt;
&lt;p&gt;在全局变量前，加上关键字static，该变量就被定义成为一个静态全局变量,存放在全局数据区。&lt;/p&gt;
&lt;h3&gt;全局变量和全局静态变量的区别&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;全局变量是不显式用static修饰的全局变量，但全局变量默认是动态的，作用域是整个工程，在一个文件内定义的全局变量，在另一个文件中，通过extern 全局变量名的声明，就可以使用全局变量。&lt;/li&gt;
&lt;li&gt;全局静态变量是显式用static修饰的全局变量，作用域是声明此变量所在的文件，其他的文件即使用extern声明也不能使用。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;静态局部变量&lt;/h2&gt;
&lt;p&gt;在局部变量前，加上关键字static，该变量就被定义成为一个静态局部变量。&lt;/p&gt;
&lt;p&gt;有时候需要在两次调用之间对变量的值进行保存。但是全局变量不易维护，所以可以使用静态局部变量。&lt;/p&gt;
&lt;p&gt;静态局部变量保存在全局数据区，而不是保存在栈中，每次的值保持到下一次调用，直到下次赋新值。其作用域为局部作用域，当定义它的函数或语句块结束时，其作用域随之结束。&lt;/p&gt;
&lt;h3&gt;静态函数&lt;/h3&gt;
&lt;p&gt;在函数的返回类型前加上static关键字，函数即被定义为静态函数。静态函数与普通函数不同，它只能在声明它的文件当中可见，不能被其它文件使用。&lt;/p&gt;
&lt;p&gt;定义静态函数的好处：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;静态函数不能被其它文件所用；&lt;/li&gt;
&lt;li&gt;其它文件中可以定义相同名字的函数，不会发生冲突；&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;class中的静态成员&lt;/h2&gt;
&lt;h3&gt;定义&lt;/h3&gt;
&lt;p&gt;对于类中的非静态成员，每个对象都有自己的该成员。而静态成员只创建一个副本。静态成员可以是函数。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="n"&gt;A&lt;/span&gt; {
&lt;span class="n"&gt;private:&lt;/span&gt;
    &lt;span class="n"&gt;char&lt;/span&gt; *&lt;span class="n"&gt;str&lt;/span&gt;;
    &lt;span class="n"&gt;static&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt; &lt;span class="nb"&gt;num&lt;/span&gt;;
    &lt;span class="n"&gt;static&lt;/span&gt; &lt;span class="nb"&gt;void&lt;/span&gt; &lt;span class="n"&gt;output&lt;/span&gt;() ;  
}；
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;每个对象都有自己的str，共享一个num&lt;/p&gt;
&lt;h3&gt;特点&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;//通过类名可以调用静态成员函数
A::output()

//静态成员函数中不能引用非静态成员
/*
因为静态成员函数属于整个类，在类实例化对象之前就已经分配空间了，而类的非静态成员必须在类实例化对象后才有内存空间，所以这个调用就出错了，就好比没有声明一个变量却提前使用它一样。
*/
//output定义为
static void output() {
    cout&amp;lt;&amp;lt;str&amp;lt;&amp;lt;endl; //error!  
}
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;初始化&lt;/h2&gt;
&lt;p&gt;只有const static 的成员可以再类的声明中直接初始化。&lt;/p&gt;
&lt;p&gt;静态成员一般选择在类的实现文件中,用构造函数以进行初始化&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nt"&gt;int&lt;/span&gt; &lt;span class="nt"&gt;A&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="nd"&gt;:num&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nt"&gt;0&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="nt"&gt;或者&lt;/span&gt;   
&lt;span class="nt"&gt;int&lt;/span&gt; &lt;span class="nt"&gt;A&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="nd"&gt;:num&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nt"&gt;0&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</summary></entry><entry><title>ubuntu字体</title><link href="http://www.philokey.com/pages/2014/08/19/ubuntuzi-ti.html" rel="alternate"></link><updated>2014-08-19T12:50:00+08:00</updated><author><name>philokey</name></author><id>tag:www.philokey.com,2014-08-19:pages/2014/08/19/ubuntuzi-ti.html</id><summary type="html">&lt;h2&gt;基础知识&lt;/h2&gt;
&lt;p&gt;Sans-serif=无衬线体=黑体：并不是具体一款字体，而是一类字体，选择它其实等于选择这类字体中优先级最高的那款字体。&lt;/p&gt;
&lt;p&gt;Serif=衬线体=白体：同上&lt;/p&gt;
&lt;p&gt;Monospace=等宽字体，用于终端下面以及编程使用。这类字体的要求是能区分 1 i l，o 0 O。：同上&lt;/p&gt;
&lt;p&gt;点阵字体=位图字体&lt;/p&gt;
&lt;p&gt;无衬线体更适合电脑屏幕阅读，衬线体适合打印。——因为衬线可以使得人视线平齐于一行。也就是说不会读破行。&lt;/p&gt;
&lt;p&gt;中文显示时有不同的方式，一方面因为中文本身拥有的横和同高度就可以导致这种平齐。行距对中文更重要。&lt;/p&gt;
&lt;h2&gt;Linux字体&lt;/h2&gt;
&lt;h3&gt;字体文件存放路径&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;/usr/share/fonts/  #系统字体
~/.fonts #用户字体
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;配置文件路径&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;/etc/fonts/fonts.conf #系统配置文件,每类字体下的第一种字体优先级最高
~/.fonts.conf #用户配置文件，只对当前用户运行的程序有效
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;命令&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;fc-cache -fv #通常复制字体进~/.fonts就会自动刷新字体，如果没有，用这个命令，如果复制进的是/usr/share/fonts/，用sudo fc-cache -fv
fc-match sans-serif #抓取当前用户sans-serif类字体优先级最高的那款字体
fc-match serif #抓取当前用户serif类字体优先级最高的那款字体
fc-match monospace #抓取当前用户monospace类字体优先级最高的那款字体
&lt;/pre&gt;&lt;/div&gt;</summary></entry><entry><title>Search in Rotated Sorted Array</title><link href="http://www.philokey.com/pages/2014/08/16/search-in-rotated-sorted-array.html" rel="alternate"></link><updated>2014-08-16T11:20:00+08:00</updated><author><name>philokey</name></author><id>tag:www.philokey.com,2014-08-16:pages/2014/08/16/search-in-rotated-sorted-array.html</id><summary type="html">&lt;p&gt;解法：二分法，分别讨论左边单调递增还是右边单调递增。当有重复元素时， A[l] == A[m] 的情况要单独拿出来考虑， 因为有[l,m] =&amp;gt; [1,3,1]这种情况&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="n"&gt;Solution:&lt;/span&gt;
    &lt;span class="c-Singleline"&gt;# @param A a list of integers&lt;/span&gt;
    &lt;span class="c-Singleline"&gt;# @param target an integer&lt;/span&gt;
    &lt;span class="c-Singleline"&gt;# @return a boolean&lt;/span&gt;
    &lt;span class="n"&gt;def&lt;/span&gt; &lt;span class="n"&gt;search&lt;/span&gt;(&lt;span class="k"&gt;self&lt;/span&gt;, &lt;span class="n"&gt;A&lt;/span&gt;, &lt;span class="n"&gt;target&lt;/span&gt;):
        &lt;span class="n"&gt;l&lt;/span&gt;, &lt;span class="n"&gt;r&lt;/span&gt; = &lt;span class="mi"&gt;0&lt;/span&gt;, &lt;span class="n"&gt;len&lt;/span&gt;(&lt;span class="n"&gt;A&lt;/span&gt;) - &lt;span class="mi"&gt;1&lt;/span&gt;
        &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="n"&gt;l&lt;/span&gt; &amp;lt;= &lt;span class="n"&gt;r:&lt;/span&gt;
            &lt;span class="sr"&gt;m = (l + r) / 2&lt;/span&gt;
&lt;span class="sr"&gt;            if A[m] =&lt;/span&gt;= &lt;span class="n"&gt;target:&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;True&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;A&lt;/span&gt;[&lt;span class="n"&gt;l&lt;/span&gt;] &amp;lt; &lt;span class="n"&gt;A&lt;/span&gt;[&lt;span class="sr"&gt;m]:&lt;/span&gt;
&lt;span class="sr"&gt;                if A[l]&lt;/span&gt; &amp;lt;= &lt;span class="n"&gt;target&lt;/span&gt; &amp;lt; &lt;span class="n"&gt;A&lt;/span&gt;[&lt;span class="sr"&gt;m]:&lt;/span&gt;
&lt;span class="sr"&gt;                    r = m - 1&lt;/span&gt;
&lt;span class="sr"&gt;                else:&lt;/span&gt;
&lt;span class="sr"&gt;                    l = m + 1&lt;/span&gt;
&lt;span class="sr"&gt;            elif A[l]&lt;/span&gt; &amp;gt; &lt;span class="n"&gt;A&lt;/span&gt;[&lt;span class="sr"&gt;m]:&lt;/span&gt;
&lt;span class="sr"&gt;                if A[m]&lt;/span&gt; &amp;lt; &lt;span class="n"&gt;target&lt;/span&gt; &amp;lt;= &lt;span class="n"&gt;A&lt;/span&gt;[&lt;span class="n"&gt;r&lt;/span&gt;]:
                    &lt;span class="n"&gt;l&lt;/span&gt; = &lt;span class="sr"&gt;m + 1&lt;/span&gt;
&lt;span class="sr"&gt;                else:&lt;/span&gt;
&lt;span class="sr"&gt;                    r = m - 1&lt;/span&gt;
&lt;span class="sr"&gt;            else :&lt;/span&gt;
&lt;span class="sr"&gt;                l +&lt;/span&gt;= &lt;span class="mi"&gt;1&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;False&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</summary><category term="binary search"></category></entry><entry><title>Longest Valid Parentheses @ LeetCode</title><link href="http://www.philokey.com/pages/2014/08/14/longest-valid-parentheses-leetcode.html" rel="alternate"></link><updated>2014-08-14T10:02:00+08:00</updated><author><name>philokey</name></author><id>tag:www.philokey.com,2014-08-14:pages/2014/08/14/longest-valid-parentheses-leetcode.html</id><summary type="html">&lt;p&gt;题意： 给出括号序列，问最长的连续合法括号子序列长度是多少&lt;/p&gt;
&lt;p&gt;解法：用一个栈记录左括号, 右括号和在数组中的下标, 如果当前括号是右括号且栈顶是左括号, 则弹栈并更新答案&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="n"&gt;Solution:&lt;/span&gt;
    &lt;span class="c-Singleline"&gt;# @param s, a string&lt;/span&gt;
    &lt;span class="c-Singleline"&gt;# @return an integer&lt;/span&gt;
    &lt;span class="n"&gt;def&lt;/span&gt; &lt;span class="n"&gt;longestValidParentheses&lt;/span&gt;(&lt;span class="k"&gt;self&lt;/span&gt;, &lt;span class="o"&gt;s&lt;/span&gt;):
        &lt;span class="n"&gt;sLen&lt;/span&gt;, &lt;span class="n"&gt;stack&lt;/span&gt;, &lt;span class="n"&gt;ret&lt;/span&gt; = &lt;span class="n"&gt;len&lt;/span&gt;(&lt;span class="o"&gt;s&lt;/span&gt;), [(-&lt;span class="mi"&gt;1&lt;/span&gt;, &lt;span class="s"&gt;&amp;#39;)&amp;#39;&lt;/span&gt;)], &lt;span class="mi"&gt;0&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="n"&gt;in&lt;/span&gt; &lt;span class="n"&gt;range&lt;/span&gt;(&lt;span class="n"&gt;sLen&lt;/span&gt;):
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;stack&lt;/span&gt;[-&lt;span class="mi"&gt;1&lt;/span&gt;][&lt;span class="mi"&gt;1&lt;/span&gt;] == &lt;span class="s"&gt;&amp;#39;(&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;and&lt;/span&gt; &lt;span class="o"&gt;s&lt;/span&gt;[&lt;span class="n"&gt;i&lt;/span&gt;] == &lt;span class="s"&gt;&amp;#39;)&amp;#39;&lt;/span&gt;:
                &lt;span class="n"&gt;stack&lt;/span&gt;.&lt;span class="nb"&gt;pop&lt;/span&gt;()
                &lt;span class="n"&gt;ret&lt;/span&gt; = &lt;span class="nb"&gt;max&lt;/span&gt;(&lt;span class="n"&gt;ret&lt;/span&gt;, &lt;span class="n"&gt;i&lt;/span&gt; - &lt;span class="n"&gt;stack&lt;/span&gt;[-&lt;span class="mi"&gt;1&lt;/span&gt;][&lt;span class="mi"&gt;0&lt;/span&gt;])
            &lt;span class="k"&gt;else&lt;/span&gt; :
                &lt;span class="n"&gt;stack&lt;/span&gt;.&lt;span class="n"&gt;append&lt;/span&gt;((&lt;span class="n"&gt;i&lt;/span&gt;, &lt;span class="o"&gt;s&lt;/span&gt;[&lt;span class="n"&gt;i&lt;/span&gt;]))
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;ret&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;blockquote&gt;
&lt;p&gt;Written with &lt;a href="https://stackedit.io/"&gt;StackEdit&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;</summary><category term="stack"></category></entry><entry><title>Unique Paths II @ LeetCode</title><link href="http://www.philokey.com/pages/2014/08/14/unique-paths-ii-leetcode.html" rel="alternate"></link><updated>2014-08-14T00:20:00+08:00</updated><author><name>philokey</name></author><id>tag:www.philokey.com,2014-08-14:pages/2014/08/14/unique-paths-ii-leetcode.html</id><summary type="html">&lt;p&gt;题意：给n*m的格子，1有障碍物，0表示没有障碍物，问从左上角到右下角有几种走法，其中有障碍物的格子不能通过。&lt;/p&gt;
&lt;p&gt;解法：&lt;/p&gt;
&lt;p&gt;动态规划。&lt;/p&gt;
&lt;p&gt;初始化第一行和第一列时遇到障碍物就停止&lt;/p&gt;
&lt;p&gt;dp[i][j] = dp[i-1][j] + dp[i][j-1], 如果grid[i][j]有障碍物, dp[i][j] = 0&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="n"&gt;Solution:&lt;/span&gt;
    &lt;span class="c-Singleline"&gt;# @param obstacleGrid, a list of lists of integers&lt;/span&gt;
    &lt;span class="c-Singleline"&gt;# @return an integer&lt;/span&gt;
    &lt;span class="n"&gt;def&lt;/span&gt; &lt;span class="n"&gt;uniquePathsWithObstacles&lt;/span&gt;(&lt;span class="k"&gt;self&lt;/span&gt;, &lt;span class="n"&gt;obstacleGrid&lt;/span&gt;):
        &lt;span class="n"&gt;n&lt;/span&gt;, &lt;span class="sr"&gt;m = len(obstacleGrid), len(obstacleGrid[0])&lt;/span&gt;
&lt;span class="sr"&gt;        dp =&lt;/span&gt;[[&lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="n"&gt;in&lt;/span&gt; &lt;span class="n"&gt;range&lt;/span&gt;(&lt;span class="sr"&gt;m)] for i in range(n)&lt;/span&gt;]
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="n"&gt;in&lt;/span&gt; &lt;span class="n"&gt;range&lt;/span&gt;(&lt;span class="n"&gt;n&lt;/span&gt;):
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;obstacleGrid&lt;/span&gt;[&lt;span class="n"&gt;i&lt;/span&gt;][&lt;span class="mi"&gt;0&lt;/span&gt;] == &lt;span class="mi"&gt;1&lt;/span&gt;: &lt;span class="k"&gt;break&lt;/span&gt;
            &lt;span class="n"&gt;dp&lt;/span&gt;[&lt;span class="n"&gt;i&lt;/span&gt;][&lt;span class="mi"&gt;0&lt;/span&gt;] = &lt;span class="mi"&gt;1&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="n"&gt;in&lt;/span&gt; &lt;span class="n"&gt;range&lt;/span&gt;(&lt;span class="sr"&gt;m):&lt;/span&gt;
&lt;span class="sr"&gt;            if obstacleGrid[0][i] == 1: break&lt;/span&gt;
&lt;span class="sr"&gt;            dp[0][i] = 1&lt;/span&gt;
&lt;span class="sr"&gt;        for i in range(1,n)&lt;/span&gt;:
            &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="n"&gt;in&lt;/span&gt; &lt;span class="n"&gt;range&lt;/span&gt;(&lt;span class="mi"&gt;1&lt;/span&gt;,&lt;span class="sr"&gt;m):&lt;/span&gt;
&lt;span class="sr"&gt;                if obstacleGrid[i][j] == 0:&lt;/span&gt;
&lt;span class="sr"&gt;                    dp[i][j] = dp[i - 1][j] + dp[i][j - 1]&lt;/span&gt;
&lt;span class="sr"&gt;        return dp[n - 1][m - 1]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</summary><category term="dp"></category></entry><entry><title>Unique Binary Search Trees @ LeetCode</title><link href="http://www.philokey.com/pages/2014/08/13/unique-binary-search-trees-leetcode.html" rel="alternate"></link><updated>2014-08-13T23:20:00+08:00</updated><author><name>philokey</name></author><id>tag:www.philokey.com,2014-08-13:pages/2014/08/13/unique-binary-search-trees-leetcode.html</id><summary type="html">&lt;p&gt;题意：给定 1-n 共n个数， 问可以组成多少种不同的二分查找树。&lt;/p&gt;
&lt;p&gt;解法：动态规划。&lt;/p&gt;
&lt;p&gt;dp[n] 表示有n个数时，构成不同二分查找树的个数。转移方程为：
&lt;/p&gt;
&lt;div class="math"&gt;$$
dp[n] = \sum_{i=0}^{n-1}dp[i]*dp[n-i-1]
$$&lt;/div&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="n"&gt;Solution:&lt;/span&gt;
    &lt;span class="c-Singleline"&gt;# @return an integer&lt;/span&gt;
    &lt;span class="n"&gt;def&lt;/span&gt; &lt;span class="n"&gt;numTrees&lt;/span&gt;(&lt;span class="k"&gt;self&lt;/span&gt;, &lt;span class="n"&gt;n&lt;/span&gt;):
        &lt;span class="n"&gt;dp&lt;/span&gt; = [&lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="n"&gt;in&lt;/span&gt; &lt;span class="n"&gt;range&lt;/span&gt;(&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;)]
        &lt;span class="n"&gt;dp&lt;/span&gt;[&lt;span class="mi"&gt;0&lt;/span&gt;] = &lt;span class="mi"&gt;1&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="n"&gt;in&lt;/span&gt; &lt;span class="n"&gt;range&lt;/span&gt;(&lt;span class="mi"&gt;1&lt;/span&gt;,&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;):
            &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="n"&gt;in&lt;/span&gt; &lt;span class="n"&gt;range&lt;/span&gt;(&lt;span class="n"&gt;i&lt;/span&gt;):
                &lt;span class="n"&gt;dp&lt;/span&gt;[&lt;span class="n"&gt;i&lt;/span&gt;] += &lt;span class="n"&gt;dp&lt;/span&gt;[&lt;span class="n"&gt;j&lt;/span&gt;] * &lt;span class="n"&gt;dp&lt;/span&gt;[&lt;span class="n"&gt;i&lt;/span&gt; - &lt;span class="n"&gt;j&lt;/span&gt; - &lt;span class="mi"&gt;1&lt;/span&gt;]
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;dp&lt;/span&gt;[&lt;span class="n"&gt;n&lt;/span&gt;]
&lt;/pre&gt;&lt;/div&gt;


&lt;script type="text/javascript"&gt;if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) {
    var align = "center",
        indent = "0em",
        linebreak = "false";

    if (false) {
        align = (screen.width &lt; 768) ? "left" : align;
        indent = (screen.width &lt; 768) ? "0em" : indent;
        linebreak = (screen.width &lt; 768) ? 'true' : linebreak;
    }

    var mathjaxscript = document.createElement('script');
    var location_protocol = (false) ? 'https' : document.location.protocol;
    if (location_protocol !== 'http' &amp;&amp; location_protocol !== 'https') location_protocol = 'https:';
    mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#';
    mathjaxscript.type = 'text/javascript';
    mathjaxscript.src = location_protocol + '//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML';
    mathjaxscript[(window.opera ? "innerHTML" : "text")] =
        "MathJax.Hub.Config({" +
        "    config: ['MMLorHTML.js']," +
        "    TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } }," +
        "    jax: ['input/TeX','input/MathML','output/HTML-CSS']," +
        "    extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js']," +
        "    displayAlign: '"+ align +"'," +
        "    displayIndent: '"+ indent +"'," +
        "    showMathMenu: true," +
        "    messageStyle: 'normal'," +
        "    tex2jax: { " +
        "        inlineMath: [ ['\\\\(','\\\\)'] ], " +
        "        displayMath: [ ['$$','$$'] ]," +
        "        processEscapes: true," +
        "        preview: 'TeX'," +
        "    }, " +
        "    'HTML-CSS': { " +
        "        styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} }," +
        "        linebreaks: { automatic: "+ linebreak +", width: '90% container' }," +
        "    }, " +
        "}); " +
        "if ('default' !== 'default') {" +
            "MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
            "MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
        "}";
    (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript);
}
&lt;/script&gt;</summary><category term="dp"></category></entry><entry><title>python 可变对象和不可变对象</title><link href="http://www.philokey.com/pages/2014/08/13/python-ke-bian-dui-xiang-he-bu-ke-bian-dui-xiang.html" rel="alternate"></link><updated>2014-08-13T15:40:00+08:00</updated><author><name>philokey</name></author><id>tag:www.philokey.com,2014-08-13:pages/2014/08/13/python-ke-bian-dui-xiang-he-bu-ke-bian-dui-xiang.html</id><summary type="html">&lt;p&gt;Python中没有变量，只有对象和名字。万物皆对象。
每个对象都包含一一个标准头,通过头部信息就可以明确知道其具体类型。
头信息由 "引用用计数" 和 "类型指针"组成,前者在对象被引用用时增加,超出作用用域或手工释放后减小,等于 0 时会被虚拟机回收 (某些被缓存的对象计数器永远不会为 0)。用 &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;sys.getrefcount(name)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;可以对象查看被引用次数&lt;/p&gt;
&lt;p&gt;Python在heap中分配的对象分成两类：可变对象和不可变对象。所谓可变对象是指，对象的内容是可变的，例如list。而不可变的对象则相反，表示其内容不可变。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;不可变对象：int，string，float，tuple&lt;/li&gt;
&lt;li&gt;可变对象   ：list，dictionary&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;不可变对象&lt;/h2&gt;
&lt;p&gt;对于不可变对象，尽管对象本身不可变，但名字的对象引用是可变的。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&amp;gt;&amp;gt;&amp;gt; a = 1005
&amp;gt;&amp;gt;&amp;gt; a = 1006 #1005的引用减1, 1006的引用加1,或者是创建的新的对象1006

#不可变对象字符串
&amp;gt;&amp;gt;&amp;gt; str = &amp;#39;12345678&amp;#39;
&amp;gt;&amp;gt;&amp;gt; print id(str), id(str+&amp;#39;a&amp;#39;) #创建了新的对象
139891756752160 139891756752784
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;不可变的对象的特征没有变，依然是不可变对象，变的只是创建了新对象，改变了变量的对象引用。
不可变对象对于函数参数而已类似于传值调用&lt;/p&gt;
&lt;h2&gt;可变对象&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;#浅拷贝,类似与传引用&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="c"&gt;#深拷贝可以将名字指向新的对象&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;copy&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;copy&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;deepcopy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pop&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="mi"&gt;4&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</summary><category term="python"></category></entry><entry><title>STL笔记</title><link href="http://www.philokey.com/pages/2014/08/10/stlbi-ji.html" rel="alternate"></link><updated>2014-08-10T18:12:00+08:00</updated><author><name>philokey</name></author><id>tag:www.philokey.com,2014-08-10:pages/2014/08/10/stlbi-ji.html</id><summary type="html">&lt;h2&gt;priority_queue自定义比较函数&lt;/h2&gt;
&lt;p&gt;模板声明带有三个参数&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;priority_queue&amp;lt;Type, Container, Functional&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Type 为数据类型， Container 为保存数据的容器，Functional 为元素比较方式。
Container 必须是用数组实现的容器，比如 vector, deque 但不能用 list.
STL里面默认用的是 vector. 比较方式默认用 operator&amp;lt; , 所以默认为小根堆。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cp"&gt;#include &amp;lt; iostream &amp;gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include &amp;lt; queue &amp;gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include &amp;lt; functional &amp;gt;&lt;/span&gt;

&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="k"&gt;namespace&lt;/span&gt; &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;cmp&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="k"&gt;public&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="kt"&gt;bool&lt;/span&gt; &lt;span class="k"&gt;operator&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;priority_queue&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;vector&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;greater&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;heap&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;//大根堆&lt;/span&gt;
    &lt;span class="n"&gt;priority_queue&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;vector&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;cmp&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;heap2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;//自定义比较类&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</summary><category term="C++"></category><category term="STL"></category></entry><entry><title>博客搭建记录</title><link href="http://www.philokey.com/pages/2014/08/01/bo-ke-da-jian-ji-lu.html" rel="alternate"></link><updated>2014-08-01T21:20:00+08:00</updated><author><name>philokey</name></author><id>tag:www.philokey.com,2014-08-01:pages/2014/08/01/bo-ke-da-jian-ji-lu.html</id><summary type="html">&lt;p&gt;厌倦了一次又一次去搜相同问题的答案，写个博客把一些东西记录下来吧。
出于黑客精神，决定自己搭建博客。&lt;/p&gt;
&lt;p&gt;Wordpress过于庞大，而且我不会PHP，所以选择了基于python的pelican。
由于github有免费的300M空间，所以博客托管再github上。github还有一个好处就是对markdown的支持不错。&lt;/p&gt;
&lt;p&gt;不用数据库，全部都以可见文本形式存储，携带迁移，好开心~&lt;/p&gt;
&lt;h3&gt;本地配置Pelican&lt;/h3&gt;
&lt;h4&gt;安装pelican和markdown&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;pip install pelican
pip install markdown
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;启动工程&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;pelican-quickstart
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;目录树如下&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;├── content             #存放.mdn文件
├── develop_server.sh   #方便开启测试服务器
├── fabfile.py          #配置文件
├── Makefile            #方便管理博客的Makefile
├── output              #生成的输出文件
├── pelicanconf.py      #主配置文件
└── publishconf.py      #主发布文件，可删除
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;尝试写博文&lt;/h4&gt;
&lt;p&gt;和普通的markdown文件稍有不同，在顶部要有&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;Title&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;My&lt;/span&gt; &lt;span class="kd"&gt;super&lt;/span&gt; &lt;span class="n"&gt;title&lt;/span&gt;
&lt;span class="n"&gt;Date&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2014&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;08&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;01&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;
&lt;span class="n"&gt;Category&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Python&lt;/span&gt;
&lt;span class="n"&gt;Tags&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;tag1&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;tag2&lt;/span&gt;
&lt;span class="n"&gt;Slug&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;my&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="kd"&gt;super&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;post&lt;/span&gt;
&lt;span class="n"&gt;Author&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Philokey&lt;/span&gt;
&lt;span class="n"&gt;Summary&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Short&lt;/span&gt; &lt;span class="n"&gt;version&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;index&lt;/span&gt; &lt;span class="n"&gt;and&lt;/span&gt; &lt;span class="n"&gt;feeds&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;前两项必填&lt;/p&gt;
&lt;h4&gt;本地运行&lt;/h4&gt;
&lt;p&gt;在博客根目录下&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;make html
make serve
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;到 http://127.0.0.1:8000/ 可以查看。&lt;/p&gt;
&lt;h4&gt;组织文件结构&lt;/h4&gt;
&lt;p&gt;默认所有都再output里,可以按照日期组织生成的html
在pelicanconf.py里配置:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;ARTICLE_URL = &amp;#39;pages/{date:%Y}/{date:%m}/{date:%d}/{slug}.html&amp;#39;
ARTICLE_SAVE_AS = &amp;#39;pages/{date:%Y}/{date:%m}/{date:%d}/{slug}.html&amp;#39;
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;修改主题&lt;/h4&gt;
&lt;p&gt;默认主题好丑，可以安装自己喜欢的主题&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;git clone https://github.com/getpelican/pelican-themes.git
cd pelican-themes
sudo pelican-themes -i bootstrap2
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;选择主题，在pelicanconf.py中添加&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;THEME = &amp;#39;bootstrap2&amp;#39;
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;安装第三方评论系统&lt;/h4&gt;
&lt;p&gt;在Disqus上申请一个站点，记牢Shortname。 在pelicanconf.py添加&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;DISQUS_SITENAME = &amp;#39;Shortname&amp;#39;
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;添加Google Analytics&lt;/h4&gt;
&lt;p&gt;去Google Analytics申请账号，记下跟踪ID。 在pelicanconf.py添加&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;GOOGLE_ANALYTICS = 跟踪ID
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;听说Google Analytics极其强悍，我没用过，试试吧&lt;/p&gt;
&lt;p&gt;至此，本地的部分就差不多搭建完毕了&lt;/p&gt;
&lt;h3&gt;使用GitHub Pages&lt;/h3&gt;
&lt;p&gt;在github上创建一个repository,名字为 username.github.io 并再setting里并再setting里面生成GitHub面生成GitHub Pages，几分钟后，页面会自动生成.&lt;/p&gt;
&lt;p&gt;到output里把&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;cd output
git init
git remote add origin git@github.com:username/username.github.io.git
git pull origin master
git add .
git commit
git push origin master 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这样在username.github.io里面就可以查看博客&lt;/p&gt;
&lt;h4&gt;一键上传&lt;/h4&gt;
&lt;p&gt;修改Makefile文件&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nf"&gt;publish&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;$(&lt;/span&gt;PELICAN&lt;span class="k"&gt;)&lt;/span&gt; &lt;span class="k"&gt;$(&lt;/span&gt;INPUTDIR&lt;span class="k"&gt;)&lt;/span&gt; -o &lt;span class="k"&gt;$(&lt;/span&gt;OUTPUTDIR&lt;span class="k"&gt;)&lt;/span&gt; -s &lt;span class="k"&gt;$(&lt;/span&gt;CONFFILE&lt;span class="k"&gt;)&lt;/span&gt; &lt;span class="k"&gt;$(&lt;/span&gt;PELICANOPTS&lt;span class="k"&gt;)&lt;/span&gt;

&lt;span class="nf"&gt;github&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;publish&lt;/span&gt;
    &lt;span class="nb"&gt;cd&lt;/span&gt; &lt;span class="k"&gt;$(&lt;/span&gt;OUTPUTDIR&lt;span class="k"&gt;)&lt;/span&gt; &lt;span class="p"&gt;;&lt;/span&gt; git add . &lt;span class="p"&gt;;&lt;/span&gt;  git commit -am &lt;span class="s1"&gt;&amp;#39;update&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;;&lt;/span&gt; git push origin master
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这样&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;make github
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;就可以实现一键上传&lt;/p&gt;
&lt;h3&gt;申请独立域名&lt;/h3&gt;
&lt;h4&gt;Godaddy&lt;/h4&gt;
&lt;p&gt;在&lt;a href="http://godaddy.com/"&gt;godaddy&lt;/a&gt;购买域名，并在Manage My Domains里修改Nameservers为这两个地址：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;f1g1ns1.dnspod.net
f1g1ns2.dnspod.net
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;使用godaddy自己的DNS服务器会被墙的样子&lt;/p&gt;
&lt;h4&gt;Dnspod&lt;/h4&gt;
&lt;p&gt;在&lt;a href="https://www.dnspod.cn/"&gt;Dnspod&lt;/a&gt;注册账号, 并添加刚申请的域名.
添加到 207.97.227.245 的A记录
并把CNAME的记录值改为 username.github.io.&lt;/p&gt;
&lt;h4&gt;Github&lt;/h4&gt;
&lt;p&gt;在output目录下添加CNAME文件，里面填入&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;www.申请的域名
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这样，博客主题就完成了。其他小功能自己探索吧&lt;/p&gt;
&lt;h3&gt;补充&lt;/h3&gt;
&lt;h4&gt;红框问题&lt;/h4&gt;
&lt;p&gt;发布之后发现代码里面有奇怪的红框，审查元素得知是css 里面有一个.err的class，如果代码被判断有语法错误就会产生红框，而大部分红框都是误伤。由于每次make html时主题的css都会重新根据安装的主题重新生成一边，所以要先卸载主题&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;sudo pelican-themes -i bootstrap2
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;把pygments.css里面的&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="na"&gt;.highlight&lt;/span&gt; &lt;span class="no"&gt;.err&lt;/span&gt; &lt;span class="err"&gt;{&lt;/span&gt; &lt;span class="no"&gt;border&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="no"&gt;px&lt;/span&gt; &lt;span class="no"&gt;solid&lt;/span&gt; &lt;span class="c"&gt;#FF0000 } /* Error */&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;去掉&lt;/p&gt;
&lt;p&gt;再重新安装主题&lt;/p&gt;</summary><category term="Pelican"></category><category term="Blog"></category><category term="Python"></category></entry><entry><title>hello world</title><link href="http://www.philokey.com/pages/2014/08/01/hello-world.html" rel="alternate"></link><updated>2014-08-01T00:00:00+08:00</updated><author><name>philokey</name></author><id>tag:www.philokey.com,2014-08-01:pages/2014/08/01/hello-world.html</id><summary type="html">&lt;h3&gt;Hello World&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cp"&gt;#include &amp;lt;cstdio&amp;gt;&lt;/span&gt;
&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Hello World&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;img alt="测试图片" src="https://lh4.googleusercontent.com/-mPNwHFX9qac/UQOGgQHjkcI/AAAAAAAAABA/YU7VaS0I2fs/s149/1131410.png" /&gt;&lt;/p&gt;</summary></entry></feed>