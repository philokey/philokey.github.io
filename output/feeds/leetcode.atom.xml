<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>philokey的笔记</title><link href="http://www.philokey.com/" rel="alternate"></link><link href="http://www.philokey.com/feeds/leetcode.atom.xml" rel="self"></link><id>http://www.philokey.com/</id><updated>2014-08-16T11:20:00+08:00</updated><entry><title>Search in Rotated Sorted Array</title><link href="http://www.philokey.com/pages/2014/08/16/search-in-rotated-sorted-array.html" rel="alternate"></link><updated>2014-08-16T11:20:00+08:00</updated><author><name>philokey</name></author><id>tag:www.philokey.com,2014-08-16:pages/2014/08/16/search-in-rotated-sorted-array.html</id><summary type="html">&lt;p&gt;解法：二分法，分别讨论左边单调递增还是右边单调递增。当有重复元素时， A[l] == A[m] 的情况要单独拿出来考虑， 因为有[l,m] =&amp;gt; [1,3,1]这种情况&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="n"&gt;Solution:&lt;/span&gt;
    &lt;span class="c-Singleline"&gt;# @param A a list of integers&lt;/span&gt;
    &lt;span class="c-Singleline"&gt;# @param target an integer&lt;/span&gt;
    &lt;span class="c-Singleline"&gt;# @return a boolean&lt;/span&gt;
    &lt;span class="n"&gt;def&lt;/span&gt; &lt;span class="n"&gt;search&lt;/span&gt;(&lt;span class="k"&gt;self&lt;/span&gt;, &lt;span class="n"&gt;A&lt;/span&gt;, &lt;span class="n"&gt;target&lt;/span&gt;):
        &lt;span class="n"&gt;l&lt;/span&gt;, &lt;span class="n"&gt;r&lt;/span&gt; = &lt;span class="mi"&gt;0&lt;/span&gt;, &lt;span class="n"&gt;len&lt;/span&gt;(&lt;span class="n"&gt;A&lt;/span&gt;) - &lt;span class="mi"&gt;1&lt;/span&gt;
        &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="n"&gt;l&lt;/span&gt; &amp;lt;= &lt;span class="n"&gt;r:&lt;/span&gt;
            &lt;span class="sr"&gt;m = (l + r) / 2&lt;/span&gt;
&lt;span class="sr"&gt;            if A[m] =&lt;/span&gt;= &lt;span class="n"&gt;target:&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;True&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;A&lt;/span&gt;[&lt;span class="n"&gt;l&lt;/span&gt;] &amp;lt; &lt;span class="n"&gt;A&lt;/span&gt;[&lt;span class="sr"&gt;m]:&lt;/span&gt;
&lt;span class="sr"&gt;                if A[l]&lt;/span&gt; &amp;lt;= &lt;span class="n"&gt;target&lt;/span&gt; &amp;lt; &lt;span class="n"&gt;A&lt;/span&gt;[&lt;span class="sr"&gt;m]:&lt;/span&gt;
&lt;span class="sr"&gt;                    r = m - 1&lt;/span&gt;
&lt;span class="sr"&gt;                else:&lt;/span&gt;
&lt;span class="sr"&gt;                    l = m + 1&lt;/span&gt;
&lt;span class="sr"&gt;            elif A[l]&lt;/span&gt; &amp;gt; &lt;span class="n"&gt;A&lt;/span&gt;[&lt;span class="sr"&gt;m]:&lt;/span&gt;
&lt;span class="sr"&gt;                if A[m]&lt;/span&gt; &amp;lt; &lt;span class="n"&gt;target&lt;/span&gt; &amp;lt;= &lt;span class="n"&gt;A&lt;/span&gt;[&lt;span class="n"&gt;r&lt;/span&gt;]:
                    &lt;span class="n"&gt;l&lt;/span&gt; = &lt;span class="sr"&gt;m + 1&lt;/span&gt;
&lt;span class="sr"&gt;                else:&lt;/span&gt;
&lt;span class="sr"&gt;                    r = m - 1&lt;/span&gt;
&lt;span class="sr"&gt;            else :&lt;/span&gt;
&lt;span class="sr"&gt;                l +&lt;/span&gt;= &lt;span class="mi"&gt;1&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;False&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</summary><category term="binary search"></category></entry><entry><title>Longest Valid Parentheses @ LeetCode</title><link href="http://www.philokey.com/pages/2014/08/14/longest-valid-parentheses-leetcode.html" rel="alternate"></link><updated>2014-08-14T10:02:00+08:00</updated><author><name>philokey</name></author><id>tag:www.philokey.com,2014-08-14:pages/2014/08/14/longest-valid-parentheses-leetcode.html</id><summary type="html">&lt;p&gt;题意： 给出括号序列，问最长的连续合法括号子序列长度是多少&lt;/p&gt;
&lt;p&gt;解法：用一个栈记录左括号, 右括号和在数组中的下标, 如果当前括号是右括号且栈顶是左括号, 则弹栈并更新答案&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="n"&gt;Solution:&lt;/span&gt;
    &lt;span class="c-Singleline"&gt;# @param s, a string&lt;/span&gt;
    &lt;span class="c-Singleline"&gt;# @return an integer&lt;/span&gt;
    &lt;span class="n"&gt;def&lt;/span&gt; &lt;span class="n"&gt;longestValidParentheses&lt;/span&gt;(&lt;span class="k"&gt;self&lt;/span&gt;, &lt;span class="o"&gt;s&lt;/span&gt;):
        &lt;span class="n"&gt;sLen&lt;/span&gt;, &lt;span class="n"&gt;stack&lt;/span&gt;, &lt;span class="n"&gt;ret&lt;/span&gt; = &lt;span class="n"&gt;len&lt;/span&gt;(&lt;span class="o"&gt;s&lt;/span&gt;), [(-&lt;span class="mi"&gt;1&lt;/span&gt;, &lt;span class="s"&gt;&amp;#39;)&amp;#39;&lt;/span&gt;)], &lt;span class="mi"&gt;0&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="n"&gt;in&lt;/span&gt; &lt;span class="n"&gt;range&lt;/span&gt;(&lt;span class="n"&gt;sLen&lt;/span&gt;):
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;stack&lt;/span&gt;[-&lt;span class="mi"&gt;1&lt;/span&gt;][&lt;span class="mi"&gt;1&lt;/span&gt;] == &lt;span class="s"&gt;&amp;#39;(&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;and&lt;/span&gt; &lt;span class="o"&gt;s&lt;/span&gt;[&lt;span class="n"&gt;i&lt;/span&gt;] == &lt;span class="s"&gt;&amp;#39;)&amp;#39;&lt;/span&gt;:
                &lt;span class="n"&gt;stack&lt;/span&gt;.&lt;span class="nb"&gt;pop&lt;/span&gt;()
                &lt;span class="n"&gt;ret&lt;/span&gt; = &lt;span class="nb"&gt;max&lt;/span&gt;(&lt;span class="n"&gt;ret&lt;/span&gt;, &lt;span class="n"&gt;i&lt;/span&gt; - &lt;span class="n"&gt;stack&lt;/span&gt;[-&lt;span class="mi"&gt;1&lt;/span&gt;][&lt;span class="mi"&gt;0&lt;/span&gt;])
            &lt;span class="k"&gt;else&lt;/span&gt; :
                &lt;span class="n"&gt;stack&lt;/span&gt;.&lt;span class="n"&gt;append&lt;/span&gt;((&lt;span class="n"&gt;i&lt;/span&gt;, &lt;span class="o"&gt;s&lt;/span&gt;[&lt;span class="n"&gt;i&lt;/span&gt;]))
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;ret&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;blockquote&gt;
&lt;p&gt;Written with &lt;a href="https://stackedit.io/"&gt;StackEdit&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;</summary><category term="stack"></category></entry><entry><title>Unique Paths II @ LeetCode</title><link href="http://www.philokey.com/pages/2014/08/14/unique-paths-ii-leetcode.html" rel="alternate"></link><updated>2014-08-14T00:20:00+08:00</updated><author><name>philokey</name></author><id>tag:www.philokey.com,2014-08-14:pages/2014/08/14/unique-paths-ii-leetcode.html</id><summary type="html">&lt;p&gt;题意：给n*m的格子，1有障碍物，0表示没有障碍物，问从左上角到右下角有几种走法，其中有障碍物的格子不能通过。&lt;/p&gt;
&lt;p&gt;解法：&lt;/p&gt;
&lt;p&gt;动态规划。&lt;/p&gt;
&lt;p&gt;初始化第一行和第一列时遇到障碍物就停止&lt;/p&gt;
&lt;p&gt;dp[i][j] = dp[i-1][j] + dp[i][j-1], 如果grid[i][j]有障碍物, dp[i][j] = 0&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="n"&gt;Solution:&lt;/span&gt;
    &lt;span class="c-Singleline"&gt;# @param obstacleGrid, a list of lists of integers&lt;/span&gt;
    &lt;span class="c-Singleline"&gt;# @return an integer&lt;/span&gt;
    &lt;span class="n"&gt;def&lt;/span&gt; &lt;span class="n"&gt;uniquePathsWithObstacles&lt;/span&gt;(&lt;span class="k"&gt;self&lt;/span&gt;, &lt;span class="n"&gt;obstacleGrid&lt;/span&gt;):
        &lt;span class="n"&gt;n&lt;/span&gt;, &lt;span class="sr"&gt;m = len(obstacleGrid), len(obstacleGrid[0])&lt;/span&gt;
&lt;span class="sr"&gt;        dp =&lt;/span&gt;[[&lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="n"&gt;in&lt;/span&gt; &lt;span class="n"&gt;range&lt;/span&gt;(&lt;span class="sr"&gt;m)] for i in range(n)&lt;/span&gt;]
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="n"&gt;in&lt;/span&gt; &lt;span class="n"&gt;range&lt;/span&gt;(&lt;span class="n"&gt;n&lt;/span&gt;):
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;obstacleGrid&lt;/span&gt;[&lt;span class="n"&gt;i&lt;/span&gt;][&lt;span class="mi"&gt;0&lt;/span&gt;] == &lt;span class="mi"&gt;1&lt;/span&gt;: &lt;span class="k"&gt;break&lt;/span&gt;
            &lt;span class="n"&gt;dp&lt;/span&gt;[&lt;span class="n"&gt;i&lt;/span&gt;][&lt;span class="mi"&gt;0&lt;/span&gt;] = &lt;span class="mi"&gt;1&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="n"&gt;in&lt;/span&gt; &lt;span class="n"&gt;range&lt;/span&gt;(&lt;span class="sr"&gt;m):&lt;/span&gt;
&lt;span class="sr"&gt;            if obstacleGrid[0][i] == 1: break&lt;/span&gt;
&lt;span class="sr"&gt;            dp[0][i] = 1&lt;/span&gt;
&lt;span class="sr"&gt;        for i in range(1,n)&lt;/span&gt;:
            &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="n"&gt;in&lt;/span&gt; &lt;span class="n"&gt;range&lt;/span&gt;(&lt;span class="mi"&gt;1&lt;/span&gt;,&lt;span class="sr"&gt;m):&lt;/span&gt;
&lt;span class="sr"&gt;                if obstacleGrid[i][j] == 0:&lt;/span&gt;
&lt;span class="sr"&gt;                    dp[i][j] = dp[i - 1][j] + dp[i][j - 1]&lt;/span&gt;
&lt;span class="sr"&gt;        return dp[n - 1][m - 1]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</summary><category term="dp"></category></entry><entry><title>Unique Binary Search Trees @ LeetCode</title><link href="http://www.philokey.com/pages/2014/08/13/unique-binary-search-trees-leetcode.html" rel="alternate"></link><updated>2014-08-13T23:20:00+08:00</updated><author><name>philokey</name></author><id>tag:www.philokey.com,2014-08-13:pages/2014/08/13/unique-binary-search-trees-leetcode.html</id><summary type="html">&lt;p&gt;题意：给定 1-n 共n个数， 问可以组成多少种不同的二分查找树。&lt;/p&gt;
&lt;p&gt;解法：动态规划。&lt;/p&gt;
&lt;p&gt;dp[n] 表示有n个数时，构成不同二分查找树的个数。转移方程为：
&lt;/p&gt;
&lt;div class="math"&gt;$$
dp[n] = \sum_{i=0}^{n-1}dp[i]*dp[n-i-1]
$$&lt;/div&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="n"&gt;Solution:&lt;/span&gt;
    &lt;span class="c-Singleline"&gt;# @return an integer&lt;/span&gt;
    &lt;span class="n"&gt;def&lt;/span&gt; &lt;span class="n"&gt;numTrees&lt;/span&gt;(&lt;span class="k"&gt;self&lt;/span&gt;, &lt;span class="n"&gt;n&lt;/span&gt;):
        &lt;span class="n"&gt;dp&lt;/span&gt; = [&lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="n"&gt;in&lt;/span&gt; &lt;span class="n"&gt;range&lt;/span&gt;(&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;)]
        &lt;span class="n"&gt;dp&lt;/span&gt;[&lt;span class="mi"&gt;0&lt;/span&gt;] = &lt;span class="mi"&gt;1&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="n"&gt;in&lt;/span&gt; &lt;span class="n"&gt;range&lt;/span&gt;(&lt;span class="mi"&gt;1&lt;/span&gt;,&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;):
            &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="n"&gt;in&lt;/span&gt; &lt;span class="n"&gt;range&lt;/span&gt;(&lt;span class="n"&gt;i&lt;/span&gt;):
                &lt;span class="n"&gt;dp&lt;/span&gt;[&lt;span class="n"&gt;i&lt;/span&gt;] += &lt;span class="n"&gt;dp&lt;/span&gt;[&lt;span class="n"&gt;j&lt;/span&gt;] * &lt;span class="n"&gt;dp&lt;/span&gt;[&lt;span class="n"&gt;i&lt;/span&gt; - &lt;span class="n"&gt;j&lt;/span&gt; - &lt;span class="mi"&gt;1&lt;/span&gt;]
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;dp&lt;/span&gt;[&lt;span class="n"&gt;n&lt;/span&gt;]
&lt;/pre&gt;&lt;/div&gt;


&lt;script type="text/javascript"&gt;if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) {
    var align = "center",
        indent = "0em",
        linebreak = "false";

    if (false) {
        align = (screen.width &lt; 768) ? "left" : align;
        indent = (screen.width &lt; 768) ? "0em" : indent;
        linebreak = (screen.width &lt; 768) ? 'true' : linebreak;
    }

    var mathjaxscript = document.createElement('script');
    var location_protocol = (false) ? 'https' : document.location.protocol;
    if (location_protocol !== 'http' &amp;&amp; location_protocol !== 'https') location_protocol = 'https:';
    mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#';
    mathjaxscript.type = 'text/javascript';
    mathjaxscript.src = location_protocol + '//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML';
    mathjaxscript[(window.opera ? "innerHTML" : "text")] =
        "MathJax.Hub.Config({" +
        "    config: ['MMLorHTML.js']," +
        "    TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } }," +
        "    jax: ['input/TeX','input/MathML','output/HTML-CSS']," +
        "    extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js']," +
        "    displayAlign: '"+ align +"'," +
        "    displayIndent: '"+ indent +"'," +
        "    showMathMenu: true," +
        "    messageStyle: 'normal'," +
        "    tex2jax: { " +
        "        inlineMath: [ ['\\\\(','\\\\)'] ], " +
        "        displayMath: [ ['$$','$$'] ]," +
        "        processEscapes: true," +
        "        preview: 'TeX'," +
        "    }, " +
        "    'HTML-CSS': { " +
        "        styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} }," +
        "        linebreaks: { automatic: "+ linebreak +", width: '90% container' }," +
        "    }, " +
        "}); " +
        "if ('default' !== 'default') {" +
            "MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
            "MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
        "}";
    (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript);
}
&lt;/script&gt;</summary><category term="dp"></category></entry></feed>